<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python之禅</title>
    <url>/1943207986.html</url>
    <content><![CDATA[<p>Beautiful is better than ugly.<br>优美胜于丑陋（Python以编写优美的代码为目标）</p><p>Explicit is better than implicit.<br>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><p>Simple is better than complex.<br>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</p><p>Complex is better than complicated.<br>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</p><p>Flat is better than nested.<br>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</p><p>Sparse is better than dense.<br>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</p><p>Readability counts.<br>可读性很重要（优美的代码是可读的）</p><p>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.</p><p>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</p><p>Errors should never pass silently.<br>Unless explicitly silenced.</p><p>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写except:pass风格的代码）</p><p>In the face of ambiguity, refuse the temptation to guess.<br>当存在多种可能，不要尝试去猜测</p><p>There should be one– and preferably only one –obvious way to do it.<br>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</p><p>Although that way may not be obvious at first unless you’re Dutch.<br>虽然这并不容易，因为你不是 Python 之父（这里的Dutch是指Guido）</p><p>Now is better than never.<br>Although never is often better than <em>right</em> now.</p><p>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</p><p>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.</p><p>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</p><p>Namespaces are one honking great idea – let’s do more of those!</p><p>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>禅</tag>
      </tags>
  </entry>
  <entry>
    <title>python多线程和多进程</title>
    <url>/3655604215.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h5 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h5><p>一个程序的执行实例就是一个<strong>进程</strong>。每一个进程提供执行程序所需的所有资源。（进程本质上是资源的集合）</p><p>一个进程有一个虚拟的地址空间、可执行的代码、操作系统的接口、安全的上下文（记录启动该进程的用户和权限等等）、唯一的进程ID、环境变量、优先级类、最小和最大的工作空间（内存空间），还要有至少一个线程。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><p>每一个进程启动时都会最先产生一个线程，即主线程。然后主线程会再创建其他的子线程。</p><p>与进程相关的资源包括：</p><ul><li>内存页（<strong>同一个进程中的所有线程共享同一个内存空间</strong>）</li><li>文件描述符(e.g. open sockets)</li><li>安全凭证（e.g.启动该进程的用户ID）</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h5 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h5><p><strong>线程</strong>是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。一个线程是一个execution context（执行上下文），即一个cpu执行时所需要的一串指令。</p><h5 id="线程的工作方式"><a href="#线程的工作方式" class="headerlink" title="线程的工作方式"></a>线程的工作方式</h5><p>假设你正在读一本书，没有读完，你想休息一下，但是你想在回来时恢复到当时读的具体进度。有一个方法就是记下页数、行数与字数这三个数值，这些数值就是execution context。如果你的室友在你休息的时候，使用相同的方法读这本书。你和她只需要这三个数字记下来就可以在交替的时间共同阅读这本书了。</p><p>线程的工作方式与此类似。CPU会给你一个在同一时间能够做多个运算的幻觉，实际上它在每个运算上只花了极少的时间，本质上CPU同一时刻只干了一件事。它能这样做就是因为它有每个运算的execution context。就像你能够和你朋友共享同一本书一样，多任务也能共享同一块CPU。</p><h3 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h3><p>1.同一个进程中的线程共享同一内存空间，但是进程之间是独立的。<br>2.同一个进程中的所有线程的数据是共享的（进程通讯），进程之间的数据是独立的。<br>3.对主线程的修改可能会影响其他线程的行为，但是父进程的修改（除了删除以外）不会影响其他子进程。<br>4.线程是一个上下文的执行指令，而进程则是与运算相关的一簇资源。<br>5.同一个进程的线程之间可以直接通信，但是进程之间的交流需要借助中间代理来实现。<br>6.创建新的线程很容易，但是创建新的进程需要对父进程做一次复制。<br>7.一个线程可以操作同一进程的其他线程，但是进程只能操作其子进程。<br>8.线程启动速度快，进程启动速度慢（但是两者运行速度没有可比性）。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h4><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-13%20%E4%B8%8B%E5%8D%8812.23.07.png" style="zoom:33%"><h5 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h5><h6 id="普通创建方式"><a href="#普通创建方式" class="headerlink" title="普通创建方式"></a>普通创建方式</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"task"</span>, n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'0s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run, args=(<span class="string">"t1"</span>,))</span><br><span class="line">t2 = threading.Thread(target=run, args=(<span class="string">"t2"</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">task t1</span></span><br><span class="line"><span class="string">task t2</span></span><br><span class="line"><span class="string">2s</span></span><br><span class="line"><span class="string">2s</span></span><br><span class="line"><span class="string">1s</span></span><br><span class="line"><span class="string">1s</span></span><br><span class="line"><span class="string">0s</span></span><br><span class="line"><span class="string">0s</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h6 id="继承threading-Thread来自定义线程类"><a href="#继承threading-Thread来自定义线程类" class="headerlink" title="继承threading.Thread来自定义线程类"></a>继承threading.Thread来自定义线程类</h6><p>其本质是重构Thread类中的run方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        super(MyThread, self).__init__()  <span class="comment"># 重构run函数必须要写</span></span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"task"</span>, self.n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'2s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'1s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'0s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">"t1"</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">"t2"</span>)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h5 id="计算子线程执行的时间"><a href="#计算子线程执行的时间" class="headerlink" title="计算子线程执行的时间"></a>计算子线程执行的时间</h5><p>注：sleep的时候是不会占用cpu的,在sleep的时候操作系统会把线程暂时挂起。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">join()  <span class="comment">#等此线程执行完后，再执行其他线程或主线程</span></span><br><span class="line">threading.current_thread()      <span class="comment">#输出当前线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"task"</span>, n,threading.current_thread())    <span class="comment">#输出当前的线程</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'3s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line"></span><br><span class="line">strat_time = time.time()</span><br><span class="line"></span><br><span class="line">t_obj = []   <span class="comment">#定义列表用于存放子线程实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">由主线程生成的三个子线程</span></span><br><span class="line"><span class="string">task t-0 &lt;Thread(Thread-1, started 44828)&gt;</span></span><br><span class="line"><span class="string">task t-1 &lt;Thread(Thread-2, started 42804)&gt;</span></span><br><span class="line"><span class="string">task t-2 &lt;Thread(Thread-3, started 41384)&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tmp <span class="keyword">in</span> t_obj:</span><br><span class="line">    t.join()            <span class="comment">#为每个子线程添加join之后，主线程就会等这些子线程执行完之后再执行。</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"cost:"</span>, time.time() - strat_time) <span class="comment">#主线程</span></span><br><span class="line"></span><br><span class="line">print(threading.current_thread())       <span class="comment">#输出当前线程</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&lt;_MainThread(MainThread, started 43740)&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="统计当前活跃的线程数"><a href="#统计当前活跃的线程数" class="headerlink" title="统计当前活跃的线程数"></a>统计当前活跃的线程数</h4><p>由于主线程比子线程快很多，当主线程执行active_count()时，其他子线程都还没执行完毕，因此利用主线程统计的活跃的线程数num = sub_num(子线程数量)+1(主线程本身)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"task"</span>, n)    </span><br><span class="line">    time.sleep(<span class="number">1</span>)       <span class="comment">#此时子线程停1s</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)     <span class="comment">#主线程停0.5秒</span></span><br><span class="line">print(threading.active_count()) <span class="comment">#输出当前活跃的线程数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">task t-0</span></span><br><span class="line"><span class="string">task t-1</span></span><br><span class="line"><span class="string">task t-2</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>由于主线程比子线程慢很多，当主线程执行active_count()时，其他子线程都已经执行完毕，因此利用主线程统计的活跃的线程数num = 1(主线程本身)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"task"</span>, n)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)       <span class="comment">#此时子线程停0.5s</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)     <span class="comment">#主线程停1秒</span></span><br><span class="line">print(threading.active_count()) <span class="comment">#输出活跃的线程数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">task t-0</span></span><br><span class="line"><span class="string">task t-1</span></span><br><span class="line"><span class="string">task t-2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>此外我们还能发现在python内部默认会等待最后一个进程执行完后再执行exit()，或者说python内部在此时有一个隐藏的join()。</p><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>我们看下面这个例子，这里使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，因此当主进程结束后，子线程也会随之结束。所以当主线程结束后，整个程序就退出了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">"task"</span>, n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)       <span class="comment">#此时子线程停1s</span></span><br><span class="line">    print(<span class="string">'3'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)   <span class="comment">#把子进程设置为守护线程，必须在start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">0.5</span>)     <span class="comment">#主线程停0.5秒</span></span><br><span class="line">print(threading.active_count()) <span class="comment">#输出活跃的线程数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">task t-0</span></span><br><span class="line"><span class="string">task t-1</span></span><br><span class="line"><span class="string">task t-2</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 0</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h4><p>在非python环境中，单核情况下，同时只能有一个任务执行。多核时可以支持多个线程同时执行。但是在python中，无论有多少核，同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。</p><p>GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。GIL只在cpython中才有，因为cpython调用的是c语言的原生线程，所以他不能直接操作cpu，只能利用GIL保证同一时间只能有一个线程拿到数据。而在pypy和jpython中是没有GIL的。</p><p><strong>Python多线程的工作过程：</strong></p><p>python在使用多线程的时候，调用的是c语言的原生线程。</p><ol><li>拿到公共数据</li><li>申请gil</li><li>python解释器调用os原生线程</li><li>os操作cpu执行运算</li><li>当该线程执行时间到后，无论运算是否已经执行完，gil都被要求释放</li><li>进而由其他进程重复上面的过程</li><li>等其他进程执行完后，又会切换到之前的线程（从他记录的上下文继续执行）<br>整个过程是每个线程执行自己的运算，当执行时间到就进行切换（context switch）。</li></ol><ul><li><p>python针对不同类型的代码执行效率也是不同的：</p><blockquote><p>1、CPU密集型代码(各种循环处理、计算等等)，在这种情况下，由于计算工作多，ticks计数很快就会达到阈值，然后触发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。<br>2、IO密集型代码(文件处理、网络爬虫等涉及文件读写的操作)，多线程能够有效提升效率(单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序执行效率)。所以python的多线程对IO密集型代码比较友好。</p></blockquote></li><li><p>使用建议？</p><blockquote><p>python下想要充分利用多核CPU，就用多进程。因为每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)。</p></blockquote></li><li><p>GIL在python中的版本差异：</p><blockquote><p>1、在python2.x里，GIL的释放逻辑是当前线程遇见<code>IO操作</code>或者<code>ticks计数达到100</code>时进行释放。（ticks可以看作是python自身的一个计数器，专门做用于GIL，每次释放后归零，这个计数可以通过sys.setcheckinterval 来调整）。而每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)，这就是为什么在多核CPU上，python的多线程效率并不高。<br>2、在python3.x中，GIL不使用ticks计数，改为使用计时器（执行时间达到阈值后，当前线程释放GIL），这样对CPU密集型程序更加友好，但依然没有解决GIL导致的同一时间只能执行一个线程的问题，所以效率依然不尽如人意。</p></blockquote></li></ul><h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，所以，出现了线程锁，即同一时刻允许一个线程执行操作。线程锁用于锁定资源，你可以定义多个锁, 像下面的代码, 当你需要独占某一资源时，任何一个锁都可以锁这个资源，就好比你用不同的锁都可以把相同的一个门锁住是一个道理。</p><p>由于线程之间是进行随机调度，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期，我们也称此为“线程不安全”。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#注意：在python2.7、mac os下，运行以下代码可能会产生脏数据。但是在python3中就不一定会出现下面的问题。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">t_obj = [] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> t_obj:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num:"</span>, num</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">产生脏数据后的运行结果：</span></span><br><span class="line"><span class="string">num: 19999</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="互斥锁（mutex）"><a href="#互斥锁（mutex）" class="headerlink" title="互斥锁（mutex）"></a>互斥锁（mutex）</h4><p>为了方式上面情况的发生，就出现了互斥锁(Lock)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    lock.acquire()  <span class="comment">#获取锁</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    lock.release()  <span class="comment">#释放锁</span></span><br><span class="line"></span><br><span class="line">lock = threading.Lock()     <span class="comment">#实例化一个锁对象</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">t_obj = []  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20000</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line">    t_obj.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> t_obj:</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num:"</span>, num</span><br></pre></td></tr></table></figure><h4 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h4><p>RLcok类的用法和Lock类一模一样，但它支持嵌套，，在多个锁没有释放的时候一般会使用使用RLcok类。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">   </span><br><span class="line">gl_num = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">lock = threading.RLock()</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func</span><span class="params">()</span>:</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    gl_num +=<span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> gl_num</span><br><span class="line">    lock.release()</span><br><span class="line">       </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=Func)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h4 id="信号量（BoundedSemaphore类）"><a href="#信号量（BoundedSemaphore类）" class="headerlink" title="信号量（BoundedSemaphore类）"></a>信号量（BoundedSemaphore类）</h4><p>互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    semaphore.acquire()   <span class="comment">#加锁</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"run the thread:%s\n"</span> % n)</span><br><span class="line">    semaphore.release()     <span class="comment">#释放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line">semaphore = threading.BoundedSemaphore(<span class="number">5</span>)  <span class="comment"># 最多允许5个线程同时运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">    t = threading.Thread(target=run, args=(<span class="string">"t-%s"</span> % i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> threading.active_count() != <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># print threading.active_count()</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'-----all threads done-----'</span>)</span><br></pre></td></tr></table></figure><h4 id="事件（Event类）"><a href="#事件（Event类）" class="headerlink" title="事件（Event类）"></a>事件（Event类）</h4><p>python线程的<strong>事件</strong>用于主线程控制其他线程的执行，事件是一个简单的线程<strong>同步</strong>对象，其主要提供以下几个方法：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-12-13%20%E4%B8%8B%E5%8D%8812.42.52.png" style="zoom:50%"><p>事件处理的机制：全局定义了一个“Flag”，当flag值为“False”，那么event.wait()就会阻塞，当flag值为“True”，那么event.wait()便不再阻塞。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#利用Event类模拟红绿灯</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.set()     <span class="comment">#初始值为绿灯</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;=<span class="number">10</span> :</span><br><span class="line">            event.clear()  <span class="comment"># 红灯，清除标志位</span></span><br><span class="line">            print(<span class="string">"\33[41;1mred light is on...\033[0m"</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.set()  <span class="comment"># 绿灯，设置标志位</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"\33[42;1mgreen light is on...\033[0m"</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():      <span class="comment">#判断是否设置了标志位</span></span><br><span class="line">            print(<span class="string">"[%s] running..."</span>%name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"[%s] sees red light,waiting..."</span>%name)</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">"[%s] green light is on,start going..."</span>%name)</span><br><span class="line"></span><br><span class="line">light = threading.Thread(target=lighter,)</span><br><span class="line">light.start()</span><br><span class="line"></span><br><span class="line">car = threading.Thread(target=car,args=(<span class="string">"MINI"</span>,))</span><br><span class="line">car.start()</span><br></pre></td></tr></table></figure><h4 id="条件（Condition类）"><a href="#条件（Condition类）" class="headerlink" title="条件（Condition类）"></a>条件（Condition类）</h4><p>使得线程等待，只有满足某条件时，才释放n个线程</p><h4 id="定时器（Timer类）"><a href="#定时器（Timer类）" class="headerlink" title="定时器（Timer类）"></a>定时器（Timer类）</h4><p>定时器，指定n秒后执行某操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello, world"</span>)</span><br><span class="line"> </span><br><span class="line">t = Timer(<span class="number">1</span>, hello)</span><br><span class="line">t.start()  <span class="comment"># after 1 seconds, "hello, world" will be printed</span></span><br></pre></td></tr></table></figure><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>在linux中，每个进程都是由父进程提供的。每启动一个子进程就从父进程克隆一份数据，但是进程之间的数据本身是不能共享的。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'hello'</span>, name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Process(target=f, args=(<span class="string">'bob'</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(title)</span>:</span></span><br><span class="line">    print(title)</span><br><span class="line">    print(<span class="string">'module name:'</span>, __name__)</span><br><span class="line">    print(<span class="string">'parent process:'</span>, os.getppid())  <span class="comment">#获取父进程id</span></span><br><span class="line">    print(<span class="string">'process id:'</span>, os.getpid())   <span class="comment">#获取自己的进程id</span></span><br><span class="line">    print(<span class="string">"\n\n"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name)</span>:</span></span><br><span class="line">    info(<span class="string">'\033[31;1mfunction f\033[0m'</span>)</span><br><span class="line">    print(<span class="string">'hello'</span>, name)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    info(<span class="string">'\033[32;1mmain process line\033[0m'</span>)</span><br><span class="line">    p = Process(target=f, args=(<span class="string">'bob'</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p>由于进程之间数据是不共享的，所以不会出现多线程GIL带来的问题。多进程之间的通信通过Queue()或Pipe()来实现</p><h5 id="Queue"><a href="#Queue" class="headerlink" title="Queue()"></a>Queue()</h5><p>使用方法跟threading里的queue差不多</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(q)</span>:</span></span><br><span class="line">    q.put([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p = Process(target=f, args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    print(q.get())    <span class="comment"># prints "[42, None, 'hello']"</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h5 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe()"></a>Pipe()</h5><p>Pipe的本质是进程之间的数据传递，而不是数据共享，这和socket有点像。pipe()返回两个连接对象分别表示管道的两端，每端都有send()和recv()方法。如果两个进程试图在同一时间的同一端进行读取和写入那么，这可能会损坏管道中的数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line">    conn.close()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe() </span><br><span class="line">    p = Process(target=f, args=(child_conn,))</span><br><span class="line">    p.start()</span><br><span class="line">    print(parent_conn.recv())   <span class="comment"># prints "[42, None, 'hello']"</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h4 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h4><p>通过Manager可实现进程间数据的共享。Manager()返回的manager对象会通过一个服务进程，来使其他进程通过代理的方式操作python对象。manager对象支持 <code>list</code>, <code>dict</code>, <code>Namespace</code>, <code>Lock</code>, <code>RLock</code>, <code>Semaphore</code>, <code>BoundedSemaphore</code>, <code>Condition</code>, <code>Event</code>, <code>Barrier</code>, <code>Queue</code>, <code>Value</code> ,<code>Array</code>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(d, l)</span>:</span></span><br><span class="line">    d[<span class="number">1</span>] = <span class="string">'1'</span></span><br><span class="line">    d[<span class="string">'2'</span>] = <span class="number">2</span></span><br><span class="line">    d[<span class="number">0.25</span>] = <span class="literal">None</span></span><br><span class="line">    l.append(<span class="number">1</span>)</span><br><span class="line">    print(l)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        d = manager.dict()</span><br><span class="line"> </span><br><span class="line">        l = manager.list(range(<span class="number">5</span>))</span><br><span class="line">        p_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            p = Process(target=f, args=(d, l))</span><br><span class="line">            p.start()</span><br><span class="line">            p_list.append(p)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> p_list:</span><br><span class="line">            res.join()</span><br><span class="line"> </span><br><span class="line">        print(d)</span><br><span class="line">        print(l)</span><br></pre></td></tr></table></figure><h4 id="进程锁（进程同步）"><a href="#进程锁（进程同步）" class="headerlink" title="进程锁（进程同步）"></a>进程锁（进程同步）</h4><p>数据输出的时候保证不同进程的输出内容在同一块屏幕正常显示，防止数据乱序的情况。<br>Without using the lock output from the different processes is liable to get all mixed up.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(l, i)</span>:</span></span><br><span class="line">    l.acquire()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'hello world'</span>, i)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        l.release()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        Process(target=f, args=(lock, num)).start()</span><br></pre></td></tr></table></figure><h4 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h4><p>由于进程启动的开销比较大，使用多进程的时候会导致大量内存空间被消耗。为了防止这种情况发生可以使用进程池，（由于启动线程的开销比较小，所以不需要线程池这种概念，多线程只会频繁得切换cpu导致系统变慢，并不会占用过多的内存空间）</p><p>进程池中常用方法：<br><code>apply()</code> 同步执行（串行）<br><code>apply_async()</code> 异步执行（并行）<br><code>terminate()</code> 立刻关闭进程池<br><code>join()</code> 主进程等待所有子进程执行完毕。必须在close或terminate()之后。<br><code>close()</code> 等待所有进程结束后，才关闭进程池。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span>  multiprocessing <span class="keyword">import</span> Process,Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Foo</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bar</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'--&gt;exec done:'</span>,arg)</span><br><span class="line"> </span><br><span class="line">pool = Pool(<span class="number">5</span>)  <span class="comment">#允许进程池同时放入5个进程</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    pool.apply_async(func=Foo, args=(i,),callback=Bar)  <span class="comment">#func子进程执行完后，才会执行callback，否则callback不执行（而且callback是由父进程来执行了）</span></span><br><span class="line">    <span class="comment">#pool.apply(func=Foo, args=(i,))</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">'end'</span>)</span><br><span class="line">pool.close()</span><br><span class="line">pool.join() <span class="comment">#主进程等待所有子进程执行完毕。必须在close()或terminate()之后。</span></span><br></pre></td></tr></table></figure><p>进程池内部维护一个进程序列，当使用时，去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。在上面的程序中产生了10个进程，但是只能有5同时被放入进程池，剩下的都被暂时挂起，并不占用内存空间，等前面的五个进程执行完后，再执行剩下5个进程。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。</p><p>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时。协程，则只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。</p><p>协程的适用场景：当程序中存在大量不需要CPU的操作时（IO）。<br>常用第三方模块gevent和greenlet。（本质上，gevent是对greenlet的高级封装，因此一般用它就行，这是一个相当高效的模块。）</p><h4 id="greenlet"><a href="#greenlet" class="headerlink" title="greenlet"></a>greenlet</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">12</span>)</span><br><span class="line">    gr2.switch()</span><br><span class="line">    print(<span class="number">34</span>)</span><br><span class="line">    gr2.switch()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">56</span>)</span><br><span class="line">    gr1.switch()</span><br><span class="line">    print(<span class="number">78</span>)</span><br><span class="line"></span><br><span class="line">gr1 = greenlet(test1)</span><br><span class="line">gr2 = greenlet(test2)</span><br><span class="line">gr1.switch()</span><br></pre></td></tr></table></figure><p>实际上，greenlet就是通过switch方法在不同的任务之间进行切换。</p><p>####gevent</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey; monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'GET: %s'</span> % url)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    data = resp.text</span><br><span class="line">    print(<span class="string">'%d bytes received from %s.'</span> % (len(data), url))</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.python.org/'</span>),</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://www.yahoo.com/'</span>),</span><br><span class="line">        gevent.spawn(f, <span class="string">'https://github.com/'</span>),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>通过joinall将任务f和它的参数进行统一调度，实现单线程中的协程。代码封装层次很高，实际使用只需要了解它的几个主要方法即可。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>bilibili滑块验证</title>
    <url>/2968554486.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>bilibili的滑动验证码图片比较好玩，和前一篇不大一样。</p><p>采用canvas方法，分析发现只找到一个图片，不过，可以通过设置display截图方式获得2张图（完整图片，带缺口的图片），取得图片后接下来的方式和前一篇一样，偏移位置参数存在差异，需要自行调试。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span>  io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">USERNAME =  <span class="string">'123456'</span></span><br><span class="line">PASSWORD = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiliLogin</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.login_url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">        self.driver = webdriver.Firefox()</span><br><span class="line">        self.wait = WebDriverWait(self.driver,<span class="number">10</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入账号密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.ID,<span class="string">'login-username'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.ID,<span class="string">'login-passwd'</span>)))</span><br><span class="line">        username.send_keys(USERNAME)</span><br><span class="line">        password.send_keys(PASSWORD)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click_login_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        点击登陆按钮</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        login_button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME,<span class="string">'btn-login'</span>)))</span><br><span class="line">        login_button.click()</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_captcha_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取验证码图片</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        geetest_canvas_bg = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,<span class="string">'geetest_canvas_bg'</span>)))</span><br><span class="line">        geetest_canvas_bg.screenshot(<span class="string">'bg.png'</span>)</span><br><span class="line">        image_bg = Image.open(<span class="string">'bg.png'</span>)</span><br><span class="line">        <span class="comment">#通过js代码修改标签样式 显示图片2</span></span><br><span class="line">        js = <span class="string">'var change = document.getElementsByClassName("geetest_canvas_fullbg");change[0].style = "display:block;"'</span></span><br><span class="line">        self.driver.execute_script(js)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        geetest_canvas_fullbg = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,<span class="string">'geetest_canvas_fullbg'</span>)))</span><br><span class="line">        geetest_canvas_fullbg.screenshot(<span class="string">'fullbg.png'</span>)</span><br><span class="line">        image_fullbg = Image.open(<span class="string">'fullbg.png'</span>)</span><br><span class="line">        <span class="keyword">return</span> image_bg,image_fullbg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(self,image1, image2)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        通过像素对比 找到缺口位置</span></span><br><span class="line"><span class="string">        :param image1:</span></span><br><span class="line"><span class="string">        :param image2:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">65</span>, image1.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> self.is_similar(image1, image2, x, y) == <span class="literal">False</span>:</span><br><span class="line">                    <span class="comment"># 判断成立 表示xy这个点 两张图不一样</span></span><br><span class="line">                    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(self,image1, image2, x, y)</span>:</span></span><br><span class="line">        pixel1 = image1.getpixel((x, y))</span><br><span class="line">        pixel2 = image2.getpixel((x, y))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> abs(pixel1[i]) - pixel2[i] &gt;= <span class="number">60</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        滑块移动轨迹</span></span><br><span class="line"><span class="string">        初速度 v =0</span></span><br><span class="line"><span class="string">        单位时间 t = 0.2</span></span><br><span class="line"><span class="string">        位移轨迹 tracks = []</span></span><br><span class="line"><span class="string">        当前位移 ccurrent = 0</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        t = <span class="number">0.2</span></span><br><span class="line">        tracks = []</span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        mid = x*<span class="number">4</span>/<span class="number">5</span><span class="comment">#到达mid值开始减速</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> current &lt; x:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                a = random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = -random.randint(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="comment"># a = 2</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 单位时间内位移公式</span></span><br><span class="line">            s = v0 * t + <span class="number">0.5</span> * a * (t ** <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 当前位移</span></span><br><span class="line">            current = current + s</span><br><span class="line">            tracks.append(round(s))</span><br><span class="line">            v = v0 + a * t</span><br><span class="line">        <span class="keyword">return</span> tracks</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_xoffset</span><span class="params">(self,tracks)</span>:</span></span><br><span class="line">        element = self.driver.find_element_by_class_name(<span class="string">'geetest_slider_button'</span>)</span><br><span class="line">        ActionChains(self.driver).click_and_hold(element).perform()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">            ActionChains(self.driver).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">        ActionChains(self.driver).release(element).perform()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_info()</span><br><span class="line">        self.click_login_button()</span><br><span class="line">        image_bg,image_fullbg = self.get_captcha_image()</span><br><span class="line">        xoffset = self.get_diff_location(image_bg,image_fullbg)</span><br><span class="line">        print(xoffset)</span><br><span class="line">        tracks = self.get_track(xoffset<span class="number">-7</span>)</span><br><span class="line">        print(tracks)</span><br><span class="line">        self.move_to_xoffset(tracks)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            self.driver.find_elements_by_class_name(<span class="string">'xxxxxxx'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.driver.refresh()</span><br><span class="line">            self.main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    bili = BiliLogin()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">5</span></span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            bili.main()</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'识别错误，继续'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'恭喜通过滑块验证'</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        bili.driver.quit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium破解滑块验证码</title>
    <url>/306213253.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在出现了一种通过用户鼠标移动滑块来填补有缺口图片的验证码，我们叫做滑动验证码。它的原理很简单，首先生成一张图片，然后随机挖去一块，在页面展示被挖去部分的图片，再通过js获取用户滑动距离，以及坐标等信息到后台进行校验。只要用户移动的距离符合，以及移动的轨迹行为检测通过即可视为验证通过。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>目前这种验证码的通用解决思路如下：</p><ol><li>获取验证码图片，包含原图以及有缺口的图</li><li>算出缺口的位置，以及滑块要滑动的距离</li><li>通过算法模拟人工移动轨迹</li><li>通过selenium模拟操作</li></ol><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3><p>以保温网为例<a href="http://www.cnbaowen.net/api/geetest/" target="_blank" rel="noopener">http://www.cnbaowen.net/api/geetest/</a></p><p>####1、获取验证码图片</p><p>注意我们需要获取两张图片，第一张是完整背景图，第二张是有缺口的背景图。</p><p>经过分析发现当鼠标位于按钮是上时显示完整背景图，当鼠标点击滑动按钮不松，显示有缺口的背景图。</p><p>根据之前学习的爬虫知识，图片一定是浏览器下载回来的，通过查看历史请求确实发现了图片</p><p>但是图片有点奇怪，仔细查看发现图片是被分块并有意随机拼接的。根据以页面的css可以利用背景将图片拼接出来。我们当然可以依葫芦画瓢的利用PIL进行图片拼接，但是太麻烦了。</p><p>selenium有个方法可以对元素进行截图，先找到图片所在的html元素，然后利用selenium分别进行截图即可获取图片。代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_full_image</span><span class="params">(driver)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    鼠标移动到滑块，显示完整图案</span></span><br><span class="line"><span class="string">    :param driver: webdriver</span></span><br><span class="line"><span class="string">    :return: 返回验证码背景图片Image对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(slider).perform()</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    img = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[1]/div[2]/div[1]/a[2]'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'show'</span> <span class="keyword">in</span> img.get_attribute(<span class="string">'class'</span>):</span><br><span class="line">        res = img.screenshot_as_png</span><br><span class="line">        <span class="keyword">return</span> Image.open(BytesIO(res))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'获取验证码背景图片失败'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cut_image</span><span class="params">(driver)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    点击滑动按钮获取有缺口图片</span></span><br><span class="line"><span class="string">    :param driver: webdriver</span></span><br><span class="line"><span class="string">    :return: 返回验证码有缺口图片的Image对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    slider = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[3]/div[2]'</span>)</span><br><span class="line">    webdriver.ActionChains(driver).click_and_hold(slider).perform()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    img = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[1]/div[2]/div[1]/a[1]'</span>)</span><br><span class="line">    res = img.screenshot_as_png</span><br><span class="line"></span><br><span class="line">    cut_img = Image.open(BytesIO(res))</span><br><span class="line">    <span class="keyword">return</span> Image.open(BytesIO(res))</span><br></pre></td></tr></table></figure><p>####2、找出缺口位置，计算移动距离</p><p>算法有很多，大家可以自由发挥。这里我们讲一种最简单的方法。我们要算出的距离是滑块要滑动的距离。</p><p>通过比较没有缺口的图片，和这张有缺口的图片，找出滑块的位置和缺口的位置即可。经过观察，发现滑块出现的位置固定在x轴的0-100像素范围内，所以循环比较两张图片的x轴0-100像素范围内的每一行像素点，直到找到第一行出现两个图片像素点颜色完全不同的点，即找到了滑块的最左边最上的第一个像素点。但是在实际操作中发现，虽然肉眼看起来两张图片公共部分一模一样，但是程序处理后的像素的具体rgb值也是不相同的，所以需要设置一个阈值来判断，具体需要进行测试。</p><p>按照相同的思路，比较两张图片x轴100-end像素的部分，找到缺口的最左最上那个点。</p><p>用找到的缺口像素点的x坐标减去找到的滑块的点的x坐标得到近似移动距离。这种算法，经过测试准确率还不错，大家如果在实际工作过程中发现有问题，需要根据具体情况去设计不同算法。</p><p>代码如下：(滑动距离计算)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(full_image, cut_image)</span>:</span></span><br><span class="line">    full_pixies = full_image.load()</span><br><span class="line">    cut_pixies = cut_image.load()</span><br><span class="line"></span><br><span class="line">    w, h = full_image.size</span><br><span class="line"></span><br><span class="line">    full_image.save(<span class="string">'full.png'</span>)</span><br><span class="line">    cut_image.save(<span class="string">'cut.png'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先找最左边不同的点</span></span><br><span class="line">    left = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> abs(full_pixies[i, j][<span class="number">0</span>] - cut_pixies[i, j][<span class="number">0</span>]) + abs(full_pixies[i, j][<span class="number">1</span>] - cut_pixies[i, j][<span class="number">1</span>]) + abs(</span><br><span class="line">                    full_pixies[i, j][<span class="number">2</span>] - cut_pixies[i, j][<span class="number">2</span>]) &gt; <span class="number">150</span>:</span><br><span class="line">                left.append((i, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 再找最右边不同的点</span></span><br><span class="line">    right = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, w):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> abs(full_pixies[i, j][<span class="number">0</span>] - cut_pixies[i, j][<span class="number">0</span>]) + abs(full_pixies[i, j][<span class="number">1</span>] - cut_pixies[i, j][<span class="number">1</span>]) + abs(</span><br><span class="line">                    full_pixies[i, j][<span class="number">2</span>] - cut_pixies[i, j][<span class="number">2</span>]) &gt; <span class="number">150</span>:</span><br><span class="line">                right.append((i, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    length = right[<span class="number">0</span>][<span class="number">0</span>] - left[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure><h4 id="3、计算滑动轨迹"><a href="#3、计算滑动轨迹" class="headerlink" title="3、计算滑动轨迹"></a>3、计算滑动轨迹</h4><p>滑动验证码早期刚面世的时候没有做行为校验，很快被破解。随着人工智能的发展，目前所有商用滑动验证码后台都有做行为校验，根据前端传递的移动轨迹，后台会进行特征校验，如果判定非人工则返回校验失败。模拟人的滑动行为，最常见的以中方法是通过加速度公式。目前这个方法已经被识别，但相对较简单，我们首先学习其思路。大家根据自己的能力可以自行扩展。</p><p>基本思路是，分析手动的移动轨迹后发现，是先加速后减速，所以通过加速度公式进行如下的设计：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        拿到移动轨迹，模仿人的滑动行为，先匀加速后匀减速</span></span><br><span class="line"><span class="string">        匀变速运动基本公式：</span></span><br><span class="line"><span class="string">        ①v=v0+at</span></span><br><span class="line"><span class="string">        ②s=v0t+(1/2)at²</span></span><br><span class="line"><span class="string">        ③v²-v0²=2as</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param distance: 需要移动的距离</span></span><br><span class="line"><span class="string">        :return: 存放每0.2秒移动的距离</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 初速度</span></span><br><span class="line">        v=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 单位时间为0.2s来统计轨迹，轨迹即0.2内的位移</span></span><br><span class="line">        t=<span class="number">0.3</span></span><br><span class="line">        <span class="comment"># 位移/轨迹列表，列表内的一个元素代表0.2s的位移</span></span><br><span class="line">        tracks=[]</span><br><span class="line">        <span class="comment"># 当前的位移</span></span><br><span class="line">        current=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 到达mid值开始减速</span></span><br><span class="line">        mid=distance * <span class="number">5</span>/<span class="number">8</span></span><br><span class="line"></span><br><span class="line">        distance += <span class="number">10</span>  <span class="comment"># 先滑过一点，最后再反着滑动回来</span></span><br><span class="line">        <span class="comment"># a = random.randint(1,3)</span></span><br><span class="line">        <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                <span class="comment"># 加速度越小，单位时间的位移越小,模拟的轨迹就越多越详细</span></span><br><span class="line">                a = random.randint(<span class="number">1</span>,<span class="number">3</span>)  <span class="comment"># 加速运动</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = -random.randint(<span class="number">2</span>,<span class="number">4</span>) <span class="comment"># 减速运动</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 初速度</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 0.2秒时间内的位移</span></span><br><span class="line">            s = v0*t+<span class="number">0.5</span>*a*(t**<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 当前的位置</span></span><br><span class="line">            current += s</span><br><span class="line">            <span class="comment"># 添加到轨迹列表</span></span><br><span class="line">            tracks.append(round(s))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 速度已经达到v,该速度作为下次的初速度</span></span><br><span class="line">            v= v0+a*t</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反着滑动到大概准确位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">           tracks.append(-random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="comment"># for i in range(4):</span></span><br><span class="line">        <span class="comment">#    tracks.append(-random.randint(1,3))</span></span><br><span class="line">        random.shuffle(tracks)</span><br><span class="line">        <span class="keyword">return</span> tracks</span><br></pre></td></tr></table></figure><h4 id="4、滑动滑块"><a href="#4、滑动滑块" class="headerlink" title="4、滑动滑块"></a>4、滑动滑块</h4><p>利用selenium，根据算出的轨迹，进行模拟滑动，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">(self, tracks)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># slider = self.driver.find_element_by_xpath('//*[@id="captcha"]/div/div[3]/div[2]')</span></span><br><span class="line">        <span class="comment"># 鼠标点击并按住不松</span></span><br><span class="line">        <span class="comment"># webdriver.ActionChains(self.driver).click_and_hold(self.slider).perform()</span></span><br><span class="line">        <span class="comment"># 让鼠标随机往下移动一段距离</span></span><br><span class="line">        webdriver.ActionChains(self.driver).move_by_offset(xoffset=<span class="number">0</span>, yoffset=<span class="number">100</span>).perform()</span><br><span class="line">        time.sleep(<span class="number">0.15</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> tracks:</span><br><span class="line">            webdriver.ActionChains(self.driver).move_by_offset(xoffset=item, yoffset=random.randint(<span class="number">-2</span>,<span class="number">2</span>)).perform()</span><br><span class="line">        <span class="comment"># 稳定一秒再松开</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        webdriver.ActionChains(self.driver).release(self.slider).perform()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 随机拿开鼠标</span></span><br><span class="line">        webdriver.ActionChains(self.driver).move_by_offset(xoffset=random.randint(<span class="number">200</span>, <span class="number">300</span>), yoffset=random.randint(<span class="number">200</span>, <span class="number">300</span>)).perform()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        info = self.driver.find_element_by_xpath(<span class="string">'//*[@id="login-modal"]/div/div/div/div[2]/div[1]/div[2]/div[1]/div/div[1]/div[2]/div[2]/div/div[2]/span[1]'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'验证通过'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'验证失败'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'再来一次'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'出现错误'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="5、完整代码"><a href="#5、完整代码" class="headerlink" title="5、完整代码"></a>5、完整代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span>  io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merge_img</span><span class="params">(img_content,location_list,num)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    拼接图片</span></span><br><span class="line"><span class="string">    :param img_content:</span></span><br><span class="line"><span class="string">    :param location_list:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    im = Image.open(img_content)</span><br><span class="line">    im_list_upper = []</span><br><span class="line">    im_list_done = []</span><br><span class="line">    <span class="keyword">for</span>  location  <span class="keyword">in</span> location_list:</span><br><span class="line">        <span class="comment"># print(location)</span></span><br><span class="line">        <span class="keyword">if</span> int(location[<span class="string">'y'</span>]) == <span class="number">-58</span>:</span><br><span class="line">            im_list_upper.append(im.crop((abs(int(location[<span class="string">'x'</span>])),<span class="number">58</span>,abs(int(location[<span class="string">'x'</span>]))+<span class="number">10</span>,<span class="number">116</span>)))</span><br><span class="line">        <span class="keyword">if</span> int(location[<span class="string">'y'</span>]) == <span class="number">0</span>:</span><br><span class="line">            im_list_done.append(im.crop((abs(int(location[<span class="string">'x'</span>])),<span class="number">0</span>,abs(int(location[<span class="string">'x'</span>]))+<span class="number">10</span>,<span class="number">58</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#create new image</span></span><br><span class="line">    new_im = Image.new(<span class="string">'RGB'</span>,(<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    x_offset=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_upper:</span><br><span class="line">        new_im.paste(im,(x_offset,<span class="number">0</span>))</span><br><span class="line">        x_offset +=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_done:</span><br><span class="line">        new_im.paste(im, (x_offset, <span class="number">58</span>))</span><br><span class="line">        x_offset += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">(driver,div_class,num)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取图片</span></span><br><span class="line"><span class="string">    :param driver:</span></span><br><span class="line"><span class="string">    :param div_class:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    background_imgs = driver.find_elements_by_class_name(div_class)</span><br><span class="line">    location_list = []</span><br><span class="line">    imge_url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> background_imgs:</span><br><span class="line"></span><br><span class="line">        location = &#123;&#125;</span><br><span class="line">        imge_url = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        location[<span class="string">'x'</span>] = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        location[<span class="string">'y'</span>] = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        location_list.append(location)</span><br><span class="line"></span><br><span class="line">    response = requests.get(imge_url).content</span><br><span class="line">    img_content  = BytesIO(response)</span><br><span class="line"></span><br><span class="line">    image = get_merge_img(img_content,location_list,num)</span><br><span class="line">    image.save(<span class="string">'&#123;&#125;.jpg'</span>.format(num))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(image1,image2)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    通过像素对比 找到缺口位置</span></span><br><span class="line"><span class="string">    :param image1:</span></span><br><span class="line"><span class="string">    :param image2:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">259</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">115</span>):</span><br><span class="line">            <span class="keyword">if</span> is_similar(image1,image2,x,y) == <span class="literal">False</span>:</span><br><span class="line">                <span class="comment">#判断成立 表示xy这个点 两张图不一样</span></span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(image1,image2,x,y)</span>:</span></span><br><span class="line">    pixel1 = image1.getpixel((x,y))</span><br><span class="line">    pixel2 = image2.getpixel((x,y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[i]) - pixel2[i] &gt;=<span class="number">50</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    滑块移动轨迹</span></span><br><span class="line"><span class="string">    初速度 v =0</span></span><br><span class="line"><span class="string">    单位时间 t = 0.2</span></span><br><span class="line"><span class="string">    位移轨迹 tracks = []</span></span><br><span class="line"><span class="string">    当前位移 ccurrent = 0</span></span><br><span class="line"><span class="string">    :param x:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    t = <span class="number">0.2</span></span><br><span class="line">    tracks = []</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    <span class="comment"># mid = x*5/8#到达mid值开始减速</span></span><br><span class="line">    <span class="comment"># x = x+10</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; x:</span><br><span class="line">        <span class="comment"># if current &lt; mid:</span></span><br><span class="line">        <span class="comment">#     a = random.randint(1,3)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     a = -random.randint(2,4)</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        v0 = v</span><br><span class="line">        <span class="comment">#单位时间内位移公式</span></span><br><span class="line">        s =v0*t+<span class="number">0.5</span>*a*(t**<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#当前位移</span></span><br><span class="line">        current = current+s</span><br><span class="line">        tracks.append(round(s))</span><br><span class="line">        v = v0+a*t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        tracks.append(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        tracks.append(<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">return</span> tracks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(driver,element)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#1为完整图、2为有缺口图</span></span><br><span class="line">    image1 = get_img(driver,<span class="string">'gt_cut_fullbg_slice'</span>,<span class="number">1</span>)</span><br><span class="line">    image2 = get_img(driver,<span class="string">'gt_cut_bg_slice'</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    x = get_diff_location(image1,image2)</span><br><span class="line">    tracks = get_track(x)</span><br><span class="line">    ActionChains(driver).click_and_hold(element).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">        ActionChains(driver).move_by_offset(xoffset=x,yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    ActionChains(driver).release(element).perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    driver = webdriver.Firefox()</span><br><span class="line">    driver.maximize_window()</span><br><span class="line">    driver.get(<span class="string">'http://www.cnbaowen.net/api/geetest/'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">5</span></span><br><span class="line">        <span class="comment"># waiting slidingVC loading</span></span><br><span class="line">        wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">        element = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'gt_slider_knob'</span>)))</span><br><span class="line">        <span class="keyword">while</span> count &gt;<span class="number">0</span>:</span><br><span class="line">            main(driver,element)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                succes = wait.until(EC.presence_of_all_elements_located((By.XPATH,<span class="string">'//div[@class="gt_ajax_tip gt_success"]'</span>)))</span><br><span class="line">                <span class="keyword">if</span> succes:</span><br><span class="line">                    print(<span class="string">'恭喜你！识别成功...'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'识别错误，继续'</span>)</span><br><span class="line">                count -=<span class="number">1</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        driver.quit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>验证码</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Python内置类型性能分析</title>
    <url>/225286723.html</url>
    <content><![CDATA[<h3 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h3><p>timeit模块可以用来测试一小段Python代码的执行速度。</p><p><strong>class timeit.Timer(stmt=’pass’, setup=’pass’, timer=<timer function>)</timer></strong></p><p>Timer是测量小段代码执行速度的类。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><p>stmt参数是要测试的代码语句（statment）；</p><p>setup参数是运行代码时需要的设置；</p><p>timer参数是一个定时器函数，与平台有关。</p><p><strong>timeit.Timer.timeit(number=1000000)</strong></p><p>Timer类中测试语句执行速度的对象方法。number参数是测试代码时的测试次数，默认为1000000次。方法返回执行代码的耗时，一个float类型的秒数。</p><h3 id="List的操作测试"><a href="#List的操作测试" class="headerlink" title="List的操作测试"></a>List的操作测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t1</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l = l + [i]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l.append(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t3</span><span class="params">()</span>:</span></span><br><span class="line">   l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t4</span><span class="params">()</span>:</span></span><br><span class="line">   l = list(range(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line">timer1 = Timer(<span class="string">"t1()"</span>, <span class="string">"from __main__ import t1"</span>)</span><br><span class="line">print(<span class="string">"concat "</span>,timer1.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer2 = Timer(<span class="string">"t2()"</span>, <span class="string">"from __main__ import t2"</span>)</span><br><span class="line">print(<span class="string">"append "</span>,timer2.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer3 = Timer(<span class="string">"t3()"</span>, <span class="string">"from __main__ import t3"</span>)</span><br><span class="line">print(<span class="string">"comprehension "</span>,timer3.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer4 = Timer(<span class="string">"t4()"</span>, <span class="string">"from __main__ import t4"</span>)</span><br><span class="line">print(<span class="string">"list range "</span>,timer4.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('concat ', 1.7890608310699463, 'seconds')</span></span><br><span class="line"><span class="comment"># ('append ', 0.13796091079711914, 'seconds')</span></span><br><span class="line"><span class="comment"># ('comprehension ', 0.05671119689941406, 'seconds')</span></span><br><span class="line"><span class="comment"># ('list range ', 0.014147043228149414, 'seconds')</span></span><br></pre></td></tr></table></figure><p><strong><em>insert与append比较</em></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t5</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.insert(<span class="number">0</span>, i)</span><br><span class="line"></span><br><span class="line">timer2 = Timer(<span class="string">'t2()'</span>, <span class="string">'from __main__ import t2'</span>)</span><br><span class="line">print(<span class="string">"append:"</span>, timer2.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">timer5 = Timer(<span class="string">'t5()'</span>, <span class="string">'from __main__ import t5'</span>)</span><br><span class="line">print(<span class="string">"insert:"</span>, timer5.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># append: 0.9202240769991477</span></span><br><span class="line"><span class="comment"># insert: 21.039387496999552</span></span><br><span class="line"></span><br><span class="line">从结果可以看出，append从尾端添加元素效率远远高于insert从顶端添加元素</span><br></pre></td></tr></table></figure><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python%E5%86%85%E7%BD%AE%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-17%20%E4%B8%8B%E5%8D%889.57.43.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/1258387680.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数据结构与算法在python中实际使用频率并不高，仅在一些特定的场景中对数据结构和算法有所要求；同时数据结构和算法对于python运行性能的提升有指导作用，不同的算法将影响运行的性能；</p><p>python内置了一些常用的数据结构如线性表结构的list、tuple，离散结构的dict，queue的队列和堆栈的结构都是数据结构的应用，只不过python将其封装成了自己的基本类。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 16:24:11 GMT+0800 (中国标准时间) --><p>数据结构涉及一些安全性，用链表实现队列比用列表实现队列更安全，因为链表只能从一端访问到另一端；列表的尾端添加元素比头部添加元素性能更好；哈希表即字典查找元素的速度高于list。</p><h2 id="各类排序算法"><a href="#各类排序算法" class="headerlink" title="各类排序算法"></a>各类排序算法</h2><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-24%20%E4%B8%8B%E5%8D%881.44.07.png" alt></p><p><strong>排序算法一般分类：</strong></p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/sort1.jpg" alt></p><p>相关概念：</p><p>​ <strong>稳定：</strong> 如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p><p>​ <strong>不稳定：</strong> 如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p><p>​ <strong>时间复杂度：</strong> 对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。</p><p>​ <strong>空间复杂度：</strong> 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>​ 依次比较两个相邻的数，将小数放到前面，大数放到后面</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>依次比较两个相邻的数，将小数放到前面，大数放到后面</p><p>第一趟：首先比较第 1 个数和第 2 个数，将小数放前，大数放后。然后比较第 2 个数和第 3 个数，将小数放前，大数放后，如此一直继续下去，直到比较最后两个数，将小数放前，大数放后。然后重复第一趟步骤，直到所有排序完成。</p><p>第一趟比较完成后，最后一个数一定是数组中最大的一个数，所以第二趟比较的时候最后一个数不参与比较。</p><p>第二趟完成后，倒数第二个数也一定是数组中第二大的数，所以第三趟比较的时候最后两个数不参与比较。</p><p>依此类推……</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/bubblesort.gif" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># j表示每次遍历需要比较的次数，是逐渐减小的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line"></span><br><span class="line">li = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">bubble_sort(li)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/selectionSort.gif" alt></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>举例：数组 <code>int[] arr = {5,2,8,4,9,1}</code></p><p><strong>第一趟排序</strong>： 原始数据：<code>5 2 8 4 9 1</code></p><p>最小数据1，把1放在首位，也就是1和5互换位置，</p><p>排序结果：<code>1 2 8 4 9 5</code></p><p><strong>第二趟排序</strong>：</p><p>第1以外的数据<code>{2 8 4 9 5}</code>进行比较，2最小，</p><p>排序结果：<code>1 2 8 4 9 5</code></p><p><strong>第三趟排序</strong>：</p><p>除<code>1、2</code>以外的数据<code>{8 4 9 5}</code>进行比较，4最小，8和4交换</p><p>排序结果：<code>1 2 4 8 9 5</code></p><p><strong>第四趟排序</strong> :</p><p>除第<code>1、2、4</code>以外的其他数据<code>{8 9 5}</code>进行比较，5最小，8和5交换</p><p>排序结果：<code>1 2 4 5 9 8</code></p><p><strong>第五趟排序：</strong></p><p>除第<code>1、2、4、5</code>以外的其他数据<code>{9 8}</code>进行比较，8最小，8和9交换</p><p>排序结果：<code>1 2</code></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="comment"># 需要进行n-1次选择操作</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># 记录最小位置</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="comment"># 从i+1位置到末尾选择出最小数据</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="comment"># 如果选择出的数据不在正确位置，进行交换</span></span><br><span class="line">        <span class="keyword">if</span> min_index != i:</span><br><span class="line">            alist[i], alist[min_index] = alist[min_index], alist[i]</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">226</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">selection_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为 O(n^2)。是稳定的排序方法。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/insertionSort.gif" alt></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>将一个数据插入到<strong>已经排好序的有序数据</strong>中</p><ul><li>将要排序的是一个乱的数组 int[] arrays = {3, 2, 1, 3, 3}</li><li>在未知道数组元素的情况下，我们<strong>只能把数组的第一个元素作为已经排好序的有序数据</strong>，也就是说，把<code>{3}</code>看成是已经排好序的有序数据</li></ul><p>第一趟排序：</p><p>用数组的第二个数与第一个数(<strong>看成是已有序的数据</strong>)比较</p><ul><li>如果比第一个数大，那就不管他</li><li>如果比第一个数小，将第一个数往后退一步，将第二个数插入第一个数去</li></ul><p>第二趟排序：</p><p>用数组的第三个数与已是有序的数据 {2,3} (刚才在第一趟排的)比较</p><ul><li>如果比 2 大，那就不管它</li><li>如果比 2 小，那就将 2 退一个位置，让第三个数和1比较</li></ul><p>在第二步中：</p><ul><li>如果第三个数比 1 大，那么将第三个数插入到 2 的位置上</li><li>如果第三个数比 1 小，那么将 1 后退一步，将第三个数插入到 1 的位置上</li></ul><p>…</p><p>后面依此类推</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="comment"># 从第二个位置，即下标为1的元素开始向前插入</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(alist)):</span><br><span class="line">        <span class="comment"># 从第i个元素开始向前比较，如果小于前一个元素，交换位置</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[j<span class="number">-1</span>]:</span><br><span class="line">                alist[j], alist[j<span class="number">-1</span>] = alist[j<span class="number">-1</span>], alist[j]</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">insert_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>从一个数组中随机选出一个数N，通过一趟排序将数组分割成三个部分，1、小于N的区域 2、等于N的区域 3、大于N的区域，然后再按照此方法对小于区的和大于区分别递归进行，从而达到整个数据变成有序数组。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quickSort.gif" alt></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>如下图：</p><p>假设最开始的基准数据为数组的第一个元素23，则首先用一个临时变量去存储基准数据，即 tmp=23，然后分别从数组的两端扫描数组，设两个指示标志：low 指向起始位置，high 指向末尾。</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort1.png" style="zoom:67%"><p>首先从后半部分开始，如果<strong>扫描到的值大于基准数据</strong>就让 high - 1，如果发现有元素比该基准数据的值小，比如上面的 18 &lt;= tmp ，就让<strong>high位置的值赋值给low位置</strong>，结果如下：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort2.png" style="zoom:67%"><p>然后开始从前往后扫描，如果扫描到的值小于基准数据就让 low+1，如果发现有元素大于基准数据的值，比如上图 46 &gt;= tmp，就再将 low 位置的值赋值给 high 位置的值，指针移动并且数据交换后的结果如下：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort3.png" style="zoom:67%"><p>然后再开始从前往后遍历，直到 low=high 结束循环，此时 low 或者 high 的下标就是<strong>基准数据23在该数组中的正确索引位置</strong>，如下图所示：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort5.png" style="zoom:67%"><p>这样一遍遍的走下来，可以很清楚的知道，快排的本质就是把比基准数据小的都放到基准数的左边，比基准数大的数都放到基准数的右边，这样就找到了该数据在数组中的正确位置。</p><p>然后采用递归的方式分别对前半部分和后半部分排序，最终结果就是自然有序的了。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist, start, end)</span>:</span></span><br><span class="line">    <span class="string">"""快速排序"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归的退出条件</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定起始元素为要寻找位置的基准元素</span></span><br><span class="line">    mid = alist[start]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># low为序列左边的由左向右移动的游标</span></span><br><span class="line">    low = start</span><br><span class="line"></span><br><span class="line">    <span class="comment"># high为序列右边的由右向左移动的游标</span></span><br><span class="line">    high = end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="comment"># 如果low与high未重合，high指向的元素不比基准元素小，则high向左移动</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt;= mid:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将high指向的元素放到low的位置上</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果low与high未重合，low指向的元素比基准元素小，则low向右移动</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将low指向的元素放到high的位置上</span></span><br><span class="line">        alist[high] = alist[low]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出循环后，low与high重合，此时所指位置为基准元素的正确位置</span></span><br><span class="line">    <span class="comment"># 将基准元素放到该位置</span></span><br><span class="line">    alist[low] = mid</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对基准元素左边的子序列进行快速排序</span></span><br><span class="line">    quick_sort(alist, start, low<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对基准元素右边的子序列进行快速排序</span></span><br><span class="line">    quick_sort(alist, low+<span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">quick_sort(alist,<span class="number">0</span>,len(alist)<span class="number">-1</span>)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/shell-sort.gif" alt></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="comment"># 初始步长</span></span><br><span class="line">    gap = n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 按步长进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span><br><span class="line">            j = i</span><br><span class="line">            <span class="comment"># 插入排序</span></span><br><span class="line">            <span class="keyword">while</span> j&gt;=gap <span class="keyword">and</span> alist[j-gap] &gt; alist[j]:</span><br><span class="line">                alist[j-gap], alist[j] = alist[j], alist[j-gap]</span><br><span class="line">                j -= gap</span><br><span class="line">        <span class="comment"># 得到新的步长</span></span><br><span class="line">        gap = gap / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">shell_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p><p>将数组分解最小之后，然后合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/guibingSort.gif" alt></p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    <span class="comment"># 二分分解</span></span><br><span class="line">    num = len(alist)/<span class="number">2</span></span><br><span class="line">    left = merge_sort(alist[:num])</span><br><span class="line">    right = merge_sort(alist[num:])</span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    <span class="string">'''合并操作，将两个有序数组left[]和right[]合并成一个大的有序数组'''</span></span><br><span class="line">    <span class="comment">#left与right的下标指针</span></span><br><span class="line">    l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> l&lt;len(left) <span class="keyword">and</span> r&lt;len(right):</span><br><span class="line">        <span class="keyword">if</span> left[l] &lt; right[r]:</span><br><span class="line">            result.append(left[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">    result += left[l:]</span><br><span class="line">    result += right[r:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">sorted_alist = mergeSort(alist)</span><br><span class="line">print(sorted_alist)</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索是在一个项目集合中找到一个特定项目的算法过程。搜索通常的答案是真的或假的，因为该项目是否存在。 搜索的几种常见方法：顺序查找、二分法查找、二叉树查找、哈希查找</p><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-24%20%E4%B8%8B%E5%8D%881.46.34.png" style="zoom:67%"><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">      first = <span class="number">0</span></span><br><span class="line">      last = len(alist)<span class="number">-1</span></span><br><span class="line">      <span class="keyword">while</span> first&lt;=last:</span><br><span class="line">          midpoint = (first + last)/<span class="number">2</span></span><br><span class="line">          <span class="keyword">if</span> alist[midpoint] == item:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">          <span class="keyword">elif</span> item &lt; alist[midpoint]:</span><br><span class="line">              last = midpoint<span class="number">-1</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              first = midpoint+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</span><br><span class="line">print(binary_search(testlist, <span class="number">3</span>))</span><br><span class="line">print(binary_search(testlist, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        midpoint = len(alist)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[midpoint]==item:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">if</span> item&lt;alist[midpoint]:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[:midpoint],item)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[midpoint+<span class="number">1</span>:],item)</span><br><span class="line"></span><br><span class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</span><br><span class="line">print(binary_search(testlist, <span class="number">3</span>))</span><br><span class="line">print(binary_search(testlist, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法排序</tag>
      </tags>
  </entry>
</search>
