<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>bilibili滑块验证</title>
    <url>/2968554486.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>bilibili的滑动验证码图片比较好玩，和前一篇不大一样。</p><p>采用canvas方法，分析发现只找到一个图片，不过，可以通过设置display截图方式获得2张图（完整图片，带缺口的图片），取得图片后接下来的方式和前一篇一样，偏移位置参数存在差异，需要自行调试。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 00:08:28 GMT+0800 (中国标准时间) --><p>完整代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span>  io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">USERNAME =  <span class="string">'123456'</span></span><br><span class="line">PASSWORD = <span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiliLogin</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.login_url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">        self.driver = webdriver.Firefox()</span><br><span class="line">        self.wait = WebDriverWait(self.driver,<span class="number">10</span>)</span><br><span class="line">        self.driver.maximize_window()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        输入账号密码</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.driver.get(self.login_url)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.ID,<span class="string">'login-username'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.ID,<span class="string">'login-passwd'</span>)))</span><br><span class="line">        username.send_keys(USERNAME)</span><br><span class="line">        password.send_keys(PASSWORD)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click_login_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        点击登陆按钮</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        login_button = self.wait.until(EC.element_to_be_clickable((By.CLASS_NAME,<span class="string">'btn-login'</span>)))</span><br><span class="line">        login_button.click()</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_captcha_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取验证码图片</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        geetest_canvas_bg = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,<span class="string">'geetest_canvas_bg'</span>)))</span><br><span class="line">        geetest_canvas_bg.screenshot(<span class="string">'bg.png'</span>)</span><br><span class="line">        image_bg = Image.open(<span class="string">'bg.png'</span>)</span><br><span class="line">        <span class="comment">#通过js代码修改标签样式 显示图片2</span></span><br><span class="line">        js = <span class="string">'var change = document.getElementsByClassName("geetest_canvas_fullbg");change[0].style = "display:block;"'</span></span><br><span class="line">        self.driver.execute_script(js)</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        geetest_canvas_fullbg = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,<span class="string">'geetest_canvas_fullbg'</span>)))</span><br><span class="line">        geetest_canvas_fullbg.screenshot(<span class="string">'fullbg.png'</span>)</span><br><span class="line">        image_fullbg = Image.open(<span class="string">'fullbg.png'</span>)</span><br><span class="line">        <span class="keyword">return</span> image_bg,image_fullbg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(self,image1, image2)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        通过像素对比 找到缺口位置</span></span><br><span class="line"><span class="string">        :param image1:</span></span><br><span class="line"><span class="string">        :param image2:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">65</span>, image1.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(image1.size[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">if</span> self.is_similar(image1, image2, x, y) == <span class="literal">False</span>:</span><br><span class="line">                    <span class="comment"># 判断成立 表示xy这个点 两张图不一样</span></span><br><span class="line">                    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(self,image1, image2, x, y)</span>:</span></span><br><span class="line">        pixel1 = image1.getpixel((x, y))</span><br><span class="line">        pixel2 = image2.getpixel((x, y))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> abs(pixel1[i]) - pixel2[i] &gt;= <span class="number">60</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        滑块移动轨迹</span></span><br><span class="line"><span class="string">        初速度 v =0</span></span><br><span class="line"><span class="string">        单位时间 t = 0.2</span></span><br><span class="line"><span class="string">        位移轨迹 tracks = []</span></span><br><span class="line"><span class="string">        当前位移 ccurrent = 0</span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        v = <span class="number">0</span></span><br><span class="line">        t = <span class="number">0.2</span></span><br><span class="line">        tracks = []</span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        mid = x*<span class="number">4</span>/<span class="number">5</span><span class="comment">#到达mid值开始减速</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> current &lt; x:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                a = random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = -random.randint(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">            <span class="comment"># a = 2</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 单位时间内位移公式</span></span><br><span class="line">            s = v0 * t + <span class="number">0.5</span> * a * (t ** <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 当前位移</span></span><br><span class="line">            current = current + s</span><br><span class="line">            tracks.append(round(s))</span><br><span class="line">            v = v0 + a * t</span><br><span class="line">        <span class="keyword">return</span> tracks</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_xoffset</span><span class="params">(self,tracks)</span>:</span></span><br><span class="line">        element = self.driver.find_element_by_class_name(<span class="string">'geetest_slider_button'</span>)</span><br><span class="line">        ActionChains(self.driver).click_and_hold(element).perform()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">            ActionChains(self.driver).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">        ActionChains(self.driver).release(element).perform()</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_info()</span><br><span class="line">        self.click_login_button()</span><br><span class="line">        image_bg,image_fullbg = self.get_captcha_image()</span><br><span class="line">        xoffset = self.get_diff_location(image_bg,image_fullbg)</span><br><span class="line">        print(xoffset)</span><br><span class="line">        tracks = self.get_track(xoffset<span class="number">-7</span>)</span><br><span class="line">        print(tracks)</span><br><span class="line">        self.move_to_xoffset(tracks)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            self.driver.find_elements_by_class_name(<span class="string">'xxxxxxx'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.driver.refresh()</span><br><span class="line">            self.main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    bili = BiliLogin()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">5</span></span><br><span class="line">        <span class="keyword">while</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            bili.main()</span><br><span class="line">            count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'识别错误，继续'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'恭喜通过滑块验证'</span>)</span><br><span class="line">        sleep(<span class="number">2</span>)</span><br><span class="line">        bili.driver.quit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium破解滑块验证码</title>
    <url>/306213253.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在出现了一种通过用户鼠标移动滑块来填补有缺口图片的验证码，我们叫做滑动验证码。它的原理很简单，首先生成一张图片，然后随机挖去一块，在页面展示被挖去部分的图片，再通过js获取用户滑动距离，以及坐标等信息到后台进行校验。只要用户移动的距离符合，以及移动的轨迹行为检测通过即可视为验证通过。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 00:08:28 GMT+0800 (中国标准时间) --><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>目前这种验证码的通用解决思路如下：</p><ol><li>获取验证码图片，包含原图以及有缺口的图</li><li>算出缺口的位置，以及滑块要滑动的距离</li><li>通过算法模拟人工移动轨迹</li><li>通过selenium模拟操作</li></ol><h3 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h3><p>以保温网为例<a href="http://www.cnbaowen.net/api/geetest/" target="_blank" rel="noopener">http://www.cnbaowen.net/api/geetest/</a></p><p>####1、获取验证码图片</p><p>注意我们需要获取两张图片，第一张是完整背景图，第二张是有缺口的背景图。</p><p>经过分析发现当鼠标位于按钮是上时显示完整背景图，当鼠标点击滑动按钮不松，显示有缺口的背景图。</p><p>根据之前学习的爬虫知识，图片一定是浏览器下载回来的，通过查看历史请求确实发现了图片</p><p>但是图片有点奇怪，仔细查看发现图片是被分块并有意随机拼接的。根据以页面的css可以利用背景将图片拼接出来。我们当然可以依葫芦画瓢的利用PIL进行图片拼接，但是太麻烦了。</p><p>selenium有个方法可以对元素进行截图，先找到图片所在的html元素，然后利用selenium分别进行截图即可获取图片。代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_full_image</span><span class="params">(driver)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    鼠标移动到滑块，显示完整图案</span></span><br><span class="line"><span class="string">    :param driver: webdriver</span></span><br><span class="line"><span class="string">    :return: 返回验证码背景图片Image对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    webdriver.ActionChains(driver).move_to_element(slider).perform()</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    img = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[1]/div[2]/div[1]/a[2]'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'show'</span> <span class="keyword">in</span> img.get_attribute(<span class="string">'class'</span>):</span><br><span class="line">        res = img.screenshot_as_png</span><br><span class="line">        <span class="keyword">return</span> Image.open(BytesIO(res))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'获取验证码背景图片失败'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cut_image</span><span class="params">(driver)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    点击滑动按钮获取有缺口图片</span></span><br><span class="line"><span class="string">    :param driver: webdriver</span></span><br><span class="line"><span class="string">    :return: 返回验证码有缺口图片的Image对象</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    slider = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[3]/div[2]'</span>)</span><br><span class="line">    webdriver.ActionChains(driver).click_and_hold(slider).perform()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    img = driver.find_element_by_xpath(<span class="string">'//*[@id="captcha"]/div/div[1]/div[2]/div[1]/a[1]'</span>)</span><br><span class="line">    res = img.screenshot_as_png</span><br><span class="line"></span><br><span class="line">    cut_img = Image.open(BytesIO(res))</span><br><span class="line">    <span class="keyword">return</span> Image.open(BytesIO(res))</span><br></pre></td></tr></table></figure><p>####2、找出缺口位置，计算移动距离</p><p>算法有很多，大家可以自由发挥。这里我们讲一种最简单的方法。我们要算出的距离是滑块要滑动的距离。</p><p>通过比较没有缺口的图片，和这张有缺口的图片，找出滑块的位置和缺口的位置即可。经过观察，发现滑块出现的位置固定在x轴的0-100像素范围内，所以循环比较两张图片的x轴0-100像素范围内的每一行像素点，直到找到第一行出现两个图片像素点颜色完全不同的点，即找到了滑块的最左边最上的第一个像素点。但是在实际操作中发现，虽然肉眼看起来两张图片公共部分一模一样，但是程序处理后的像素的具体rgb值也是不相同的，所以需要设置一个阈值来判断，具体需要进行测试。</p><p>按照相同的思路，比较两张图片x轴100-end像素的部分，找到缺口的最左最上那个点。</p><p>用找到的缺口像素点的x坐标减去找到的滑块的点的x坐标得到近似移动距离。这种算法，经过测试准确率还不错，大家如果在实际工作过程中发现有问题，需要根据具体情况去设计不同算法。</p><p>代码如下：(滑动距离计算)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(full_image, cut_image)</span>:</span></span><br><span class="line">    full_pixies = full_image.load()</span><br><span class="line">    cut_pixies = cut_image.load()</span><br><span class="line"></span><br><span class="line">    w, h = full_image.size</span><br><span class="line"></span><br><span class="line">    full_image.save(<span class="string">'full.png'</span>)</span><br><span class="line">    cut_image.save(<span class="string">'cut.png'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先找最左边不同的点</span></span><br><span class="line">    left = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> abs(full_pixies[i, j][<span class="number">0</span>] - cut_pixies[i, j][<span class="number">0</span>]) + abs(full_pixies[i, j][<span class="number">1</span>] - cut_pixies[i, j][<span class="number">1</span>]) + abs(</span><br><span class="line">                    full_pixies[i, j][<span class="number">2</span>] - cut_pixies[i, j][<span class="number">2</span>]) &gt; <span class="number">150</span>:</span><br><span class="line">                left.append((i, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 再找最右边不同的点</span></span><br><span class="line">    right = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(h):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, w):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> abs(full_pixies[i, j][<span class="number">0</span>] - cut_pixies[i, j][<span class="number">0</span>]) + abs(full_pixies[i, j][<span class="number">1</span>] - cut_pixies[i, j][<span class="number">1</span>]) + abs(</span><br><span class="line">                    full_pixies[i, j][<span class="number">2</span>] - cut_pixies[i, j][<span class="number">2</span>]) &gt; <span class="number">150</span>:</span><br><span class="line">                right.append((i, j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> right:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    length = right[<span class="number">0</span>][<span class="number">0</span>] - left[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length</span><br></pre></td></tr></table></figure><h4 id="3、计算滑动轨迹"><a href="#3、计算滑动轨迹" class="headerlink" title="3、计算滑动轨迹"></a>3、计算滑动轨迹</h4><p>滑动验证码早期刚面世的时候没有做行为校验，很快被破解。随着人工智能的发展，目前所有商用滑动验证码后台都有做行为校验，根据前端传递的移动轨迹，后台会进行特征校验，如果判定非人工则返回校验失败。模拟人的滑动行为，最常见的以中方法是通过加速度公式。目前这个方法已经被识别，但相对较简单，我们首先学习其思路。大家根据自己的能力可以自行扩展。</p><p>基本思路是，分析手动的移动轨迹后发现，是先加速后减速，所以通过加速度公式进行如下的设计：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        拿到移动轨迹，模仿人的滑动行为，先匀加速后匀减速</span></span><br><span class="line"><span class="string">        匀变速运动基本公式：</span></span><br><span class="line"><span class="string">        ①v=v0+at</span></span><br><span class="line"><span class="string">        ②s=v0t+(1/2)at²</span></span><br><span class="line"><span class="string">        ③v²-v0²=2as</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param distance: 需要移动的距离</span></span><br><span class="line"><span class="string">        :return: 存放每0.2秒移动的距离</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 初速度</span></span><br><span class="line">        v=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 单位时间为0.2s来统计轨迹，轨迹即0.2内的位移</span></span><br><span class="line">        t=<span class="number">0.3</span></span><br><span class="line">        <span class="comment"># 位移/轨迹列表，列表内的一个元素代表0.2s的位移</span></span><br><span class="line">        tracks=[]</span><br><span class="line">        <span class="comment"># 当前的位移</span></span><br><span class="line">        current=<span class="number">0</span></span><br><span class="line">        <span class="comment"># 到达mid值开始减速</span></span><br><span class="line">        mid=distance * <span class="number">5</span>/<span class="number">8</span></span><br><span class="line"></span><br><span class="line">        distance += <span class="number">10</span>  <span class="comment"># 先滑过一点，最后再反着滑动回来</span></span><br><span class="line">        <span class="comment"># a = random.randint(1,3)</span></span><br><span class="line">        <span class="keyword">while</span> current &lt; distance:</span><br><span class="line">            <span class="keyword">if</span> current &lt; mid:</span><br><span class="line">                <span class="comment"># 加速度越小，单位时间的位移越小,模拟的轨迹就越多越详细</span></span><br><span class="line">                a = random.randint(<span class="number">1</span>,<span class="number">3</span>)  <span class="comment"># 加速运动</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = -random.randint(<span class="number">2</span>,<span class="number">4</span>) <span class="comment"># 减速运动</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 初速度</span></span><br><span class="line">            v0 = v</span><br><span class="line">            <span class="comment"># 0.2秒时间内的位移</span></span><br><span class="line">            s = v0*t+<span class="number">0.5</span>*a*(t**<span class="number">2</span>)</span><br><span class="line">            <span class="comment"># 当前的位置</span></span><br><span class="line">            current += s</span><br><span class="line">            <span class="comment"># 添加到轨迹列表</span></span><br><span class="line">            tracks.append(round(s))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 速度已经达到v,该速度作为下次的初速度</span></span><br><span class="line">            v= v0+a*t</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反着滑动到大概准确位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">           tracks.append(-random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="comment"># for i in range(4):</span></span><br><span class="line">        <span class="comment">#    tracks.append(-random.randint(1,3))</span></span><br><span class="line">        random.shuffle(tracks)</span><br><span class="line">        <span class="keyword">return</span> tracks</span><br></pre></td></tr></table></figure><h4 id="4、滑动滑块"><a href="#4、滑动滑块" class="headerlink" title="4、滑动滑块"></a>4、滑动滑块</h4><p>利用selenium，根据算出的轨迹，进行模拟滑动，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">(self, tracks)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># slider = self.driver.find_element_by_xpath('//*[@id="captcha"]/div/div[3]/div[2]')</span></span><br><span class="line">        <span class="comment"># 鼠标点击并按住不松</span></span><br><span class="line">        <span class="comment"># webdriver.ActionChains(self.driver).click_and_hold(self.slider).perform()</span></span><br><span class="line">        <span class="comment"># 让鼠标随机往下移动一段距离</span></span><br><span class="line">        webdriver.ActionChains(self.driver).move_by_offset(xoffset=<span class="number">0</span>, yoffset=<span class="number">100</span>).perform()</span><br><span class="line">        time.sleep(<span class="number">0.15</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> tracks:</span><br><span class="line">            webdriver.ActionChains(self.driver).move_by_offset(xoffset=item, yoffset=random.randint(<span class="number">-2</span>,<span class="number">2</span>)).perform()</span><br><span class="line">        <span class="comment"># 稳定一秒再松开</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        webdriver.ActionChains(self.driver).release(self.slider).perform()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 随机拿开鼠标</span></span><br><span class="line">        webdriver.ActionChains(self.driver).move_by_offset(xoffset=random.randint(<span class="number">200</span>, <span class="number">300</span>), yoffset=random.randint(<span class="number">200</span>, <span class="number">300</span>)).perform()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        info = self.driver.find_element_by_xpath(<span class="string">'//*[@id="login-modal"]/div/div/div/div[2]/div[1]/div[2]/div[1]/div/div[1]/div[2]/div[2]/div/div[2]/span[1]'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'验证通过'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'验证失败'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'再来一次'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'出现错误'</span> <span class="keyword">in</span> info.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="5、完整代码"><a href="#5、完整代码" class="headerlink" title="5、完整代码"></a>5、完整代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span>  selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span>  selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span>  io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merge_img</span><span class="params">(img_content,location_list,num)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    拼接图片</span></span><br><span class="line"><span class="string">    :param img_content:</span></span><br><span class="line"><span class="string">    :param location_list:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    im = Image.open(img_content)</span><br><span class="line">    im_list_upper = []</span><br><span class="line">    im_list_done = []</span><br><span class="line">    <span class="keyword">for</span>  location  <span class="keyword">in</span> location_list:</span><br><span class="line">        <span class="comment"># print(location)</span></span><br><span class="line">        <span class="keyword">if</span> int(location[<span class="string">'y'</span>]) == <span class="number">-58</span>:</span><br><span class="line">            im_list_upper.append(im.crop((abs(int(location[<span class="string">'x'</span>])),<span class="number">58</span>,abs(int(location[<span class="string">'x'</span>]))+<span class="number">10</span>,<span class="number">116</span>)))</span><br><span class="line">        <span class="keyword">if</span> int(location[<span class="string">'y'</span>]) == <span class="number">0</span>:</span><br><span class="line">            im_list_done.append(im.crop((abs(int(location[<span class="string">'x'</span>])),<span class="number">0</span>,abs(int(location[<span class="string">'x'</span>]))+<span class="number">10</span>,<span class="number">58</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#create new image</span></span><br><span class="line">    new_im = Image.new(<span class="string">'RGB'</span>,(<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    x_offset=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_upper:</span><br><span class="line">        new_im.paste(im,(x_offset,<span class="number">0</span>))</span><br><span class="line">        x_offset +=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_done:</span><br><span class="line">        new_im.paste(im, (x_offset, <span class="number">58</span>))</span><br><span class="line">        x_offset += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_im</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">(driver,div_class,num)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    获取图片</span></span><br><span class="line"><span class="string">    :param driver:</span></span><br><span class="line"><span class="string">    :param div_class:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    background_imgs = driver.find_elements_by_class_name(div_class)</span><br><span class="line">    location_list = []</span><br><span class="line">    imge_url = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> background_imgs:</span><br><span class="line"></span><br><span class="line">        location = &#123;&#125;</span><br><span class="line">        imge_url = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        location[<span class="string">'x'</span>] = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        location[<span class="string">'y'</span>] = re.findall(<span class="string">r'background-image: url\(\"(.*?)\"\); background-position: (.*?)px (.*?)px;'</span>,img.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        location_list.append(location)</span><br><span class="line"></span><br><span class="line">    response = requests.get(imge_url).content</span><br><span class="line">    img_content  = BytesIO(response)</span><br><span class="line"></span><br><span class="line">    image = get_merge_img(img_content,location_list,num)</span><br><span class="line">    image.save(<span class="string">'&#123;&#125;.jpg'</span>.format(num))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(image1,image2)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    通过像素对比 找到缺口位置</span></span><br><span class="line"><span class="string">    :param image1:</span></span><br><span class="line"><span class="string">    :param image2:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">259</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">115</span>):</span><br><span class="line">            <span class="keyword">if</span> is_similar(image1,image2,x,y) == <span class="literal">False</span>:</span><br><span class="line">                <span class="comment">#判断成立 表示xy这个点 两张图不一样</span></span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(image1,image2,x,y)</span>:</span></span><br><span class="line">    pixel1 = image1.getpixel((x,y))</span><br><span class="line">    pixel2 = image2.getpixel((x,y))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[i]) - pixel2[i] &gt;=<span class="number">50</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    滑块移动轨迹</span></span><br><span class="line"><span class="string">    初速度 v =0</span></span><br><span class="line"><span class="string">    单位时间 t = 0.2</span></span><br><span class="line"><span class="string">    位移轨迹 tracks = []</span></span><br><span class="line"><span class="string">    当前位移 ccurrent = 0</span></span><br><span class="line"><span class="string">    :param x:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    v = <span class="number">0</span></span><br><span class="line">    t = <span class="number">0.2</span></span><br><span class="line">    tracks = []</span><br><span class="line">    current = <span class="number">0</span></span><br><span class="line">    <span class="comment"># mid = x*5/8#到达mid值开始减速</span></span><br><span class="line">    <span class="comment"># x = x+10</span></span><br><span class="line">    <span class="keyword">while</span> current &lt; x:</span><br><span class="line">        <span class="comment"># if current &lt; mid:</span></span><br><span class="line">        <span class="comment">#     a = random.randint(1,3)</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     a = -random.randint(2,4)</span></span><br><span class="line">        a = <span class="number">2</span></span><br><span class="line">        v0 = v</span><br><span class="line">        <span class="comment">#单位时间内位移公式</span></span><br><span class="line">        s =v0*t+<span class="number">0.5</span>*a*(t**<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#当前位移</span></span><br><span class="line">        current = current+s</span><br><span class="line">        tracks.append(round(s))</span><br><span class="line">        v = v0+a*t</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        tracks.append(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        tracks.append(<span class="number">-2</span>)</span><br><span class="line">    <span class="keyword">return</span> tracks</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(driver,element)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#1为完整图、2为有缺口图</span></span><br><span class="line">    image1 = get_img(driver,<span class="string">'gt_cut_fullbg_slice'</span>,<span class="number">1</span>)</span><br><span class="line">    image2 = get_img(driver,<span class="string">'gt_cut_bg_slice'</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    x = get_diff_location(image1,image2)</span><br><span class="line">    tracks = get_track(x)</span><br><span class="line">    ActionChains(driver).click_and_hold(element).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tracks:</span><br><span class="line">        ActionChains(driver).move_by_offset(xoffset=x,yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    ActionChains(driver).release(element).perform()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    driver = webdriver.Firefox()</span><br><span class="line">    driver.maximize_window()</span><br><span class="line">    driver.get(<span class="string">'http://www.cnbaowen.net/api/geetest/'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        count = <span class="number">5</span></span><br><span class="line">        <span class="comment"># waiting slidingVC loading</span></span><br><span class="line">        wait = WebDriverWait(driver, <span class="number">10</span>)</span><br><span class="line">        element = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, <span class="string">'gt_slider_knob'</span>)))</span><br><span class="line">        <span class="keyword">while</span> count &gt;<span class="number">0</span>:</span><br><span class="line">            main(driver,element)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                succes = wait.until(EC.presence_of_all_elements_located((By.XPATH,<span class="string">'//div[@class="gt_ajax_tip gt_success"]'</span>)))</span><br><span class="line">                <span class="keyword">if</span> succes:</span><br><span class="line">                    print(<span class="string">'恭喜你！识别成功...'</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'识别错误，继续'</span>)</span><br><span class="line">                count -=<span class="number">1</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        driver.quit()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>验证码</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Python内置类型性能分析</title>
    <url>/225286723.html</url>
    <content><![CDATA[<h3 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h3><p>timeit模块可以用来测试一小段Python代码的执行速度。</p><p><strong>class timeit.Timer(stmt=’pass’, setup=’pass’, timer=<timer function>)</timer></strong></p><p>Timer是测量小段代码执行速度的类。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 00:08:28 GMT+0800 (中国标准时间) --><p>stmt参数是要测试的代码语句（statment）；</p><p>setup参数是运行代码时需要的设置；</p><p>timer参数是一个定时器函数，与平台有关。</p><p><strong>timeit.Timer.timeit(number=1000000)</strong></p><p>Timer类中测试语句执行速度的对象方法。number参数是测试代码时的测试次数，默认为1000000次。方法返回执行代码的耗时，一个float类型的秒数。</p><h3 id="List的操作测试"><a href="#List的操作测试" class="headerlink" title="List的操作测试"></a>List的操作测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t1</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l = l + [i]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l.append(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t3</span><span class="params">()</span>:</span></span><br><span class="line">   l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t4</span><span class="params">()</span>:</span></span><br><span class="line">   l = list(range(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line">timer1 = Timer(<span class="string">"t1()"</span>, <span class="string">"from __main__ import t1"</span>)</span><br><span class="line">print(<span class="string">"concat "</span>,timer1.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer2 = Timer(<span class="string">"t2()"</span>, <span class="string">"from __main__ import t2"</span>)</span><br><span class="line">print(<span class="string">"append "</span>,timer2.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer3 = Timer(<span class="string">"t3()"</span>, <span class="string">"from __main__ import t3"</span>)</span><br><span class="line">print(<span class="string">"comprehension "</span>,timer3.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer4 = Timer(<span class="string">"t4()"</span>, <span class="string">"from __main__ import t4"</span>)</span><br><span class="line">print(<span class="string">"list range "</span>,timer4.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('concat ', 1.7890608310699463, 'seconds')</span></span><br><span class="line"><span class="comment"># ('append ', 0.13796091079711914, 'seconds')</span></span><br><span class="line"><span class="comment"># ('comprehension ', 0.05671119689941406, 'seconds')</span></span><br><span class="line"><span class="comment"># ('list range ', 0.014147043228149414, 'seconds')</span></span><br></pre></td></tr></table></figure><p><strong><em>insert与append比较</em></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t5</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.insert(<span class="number">0</span>, i)</span><br><span class="line"></span><br><span class="line">timer2 = Timer(<span class="string">'t2()'</span>, <span class="string">'from __main__ import t2'</span>)</span><br><span class="line">print(<span class="string">"append:"</span>, timer2.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">timer5 = Timer(<span class="string">'t5()'</span>, <span class="string">'from __main__ import t5'</span>)</span><br><span class="line">print(<span class="string">"insert:"</span>, timer5.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># append: 0.9202240769991477</span></span><br><span class="line"><span class="comment"># insert: 21.039387496999552</span></span><br><span class="line"></span><br><span class="line">从结果可以看出，append从尾端添加元素效率远远高于insert从顶端添加元素</span><br></pre></td></tr></table></figure><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python%E5%86%85%E7%BD%AE%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-17%20%E4%B8%8B%E5%8D%889.57.43.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/1258387680.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数据结构与算法在python中实际使用频率并不高，仅在一些特定的场景中对数据结构和算法有所要求；同时数据结构和算法对于python运行性能的提升有指导作用，不同的算法将影响运行的性能；</p><p>python内置了一些常用的数据结构如线性表结构的list、tuple，离散结构的dict，queue的队列和堆栈的结构都是数据结构的应用，只不过python将其封装成了自己的基本类。</p><a id="more"></a><!-- build time:Fri Dec 13 2019 00:08:28 GMT+0800 (中国标准时间) --><p>数据结构涉及一些安全性，用链表实现队列比用列表实现队列更安全，因为链表只能从一端访问到另一端；列表的尾端添加元素比头部添加元素性能更好；哈希表即字典查找元素的速度高于list。</p><h2 id="各类排序算法"><a href="#各类排序算法" class="headerlink" title="各类排序算法"></a>各类排序算法</h2><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-24%20%E4%B8%8B%E5%8D%881.44.07.png" alt></p><p><strong>排序算法一般分类：</strong></p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/sort1.jpg" alt></p><p>相关概念：</p><p>​ <strong>稳定：</strong> 如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p><p>​ <strong>不稳定：</strong> 如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p><p>​ <strong>时间复杂度：</strong> 对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。</p><p>​ <strong>空间复杂度：</strong> 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>​ 依次比较两个相邻的数，将小数放到前面，大数放到后面</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>依次比较两个相邻的数，将小数放到前面，大数放到后面</p><p>第一趟：首先比较第 1 个数和第 2 个数，将小数放前，大数放后。然后比较第 2 个数和第 3 个数，将小数放前，大数放后，如此一直继续下去，直到比较最后两个数，将小数放前，大数放后。然后重复第一趟步骤，直到所有排序完成。</p><p>第一趟比较完成后，最后一个数一定是数组中最大的一个数，所以第二趟比较的时候最后一个数不参与比较。</p><p>第二趟完成后，倒数第二个数也一定是数组中第二大的数，所以第三趟比较的时候最后两个数不参与比较。</p><p>依此类推……</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/bubblesort.gif" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># j表示每次遍历需要比较的次数，是逐渐减小的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line"></span><br><span class="line">li = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">bubble_sort(li)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/selectionSort.gif" alt></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>举例：数组 <code>int[] arr = {5,2,8,4,9,1}</code></p><p><strong>第一趟排序</strong>： 原始数据：<code>5 2 8 4 9 1</code></p><p>最小数据1，把1放在首位，也就是1和5互换位置，</p><p>排序结果：<code>1 2 8 4 9 5</code></p><p><strong>第二趟排序</strong>：</p><p>第1以外的数据<code>{2 8 4 9 5}</code>进行比较，2最小，</p><p>排序结果：<code>1 2 8 4 9 5</code></p><p><strong>第三趟排序</strong>：</p><p>除<code>1、2</code>以外的数据<code>{8 4 9 5}</code>进行比较，4最小，8和4交换</p><p>排序结果：<code>1 2 4 8 9 5</code></p><p><strong>第四趟排序</strong> :</p><p>除第<code>1、2、4</code>以外的其他数据<code>{8 9 5}</code>进行比较，5最小，8和5交换</p><p>排序结果：<code>1 2 4 5 9 8</code></p><p><strong>第五趟排序：</strong></p><p>除第<code>1、2、4、5</code>以外的其他数据<code>{9 8}</code>进行比较，8最小，8和9交换</p><p>排序结果：<code>1 2</code></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="comment"># 需要进行n-1次选择操作</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># 记录最小位置</span></span><br><span class="line">        min_index = i</span><br><span class="line">        <span class="comment"># 从i+1位置到末尾选择出最小数据</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[min_index]:</span><br><span class="line">                min_index = j</span><br><span class="line">        <span class="comment"># 如果选择出的数据不在正确位置，进行交换</span></span><br><span class="line">        <span class="keyword">if</span> min_index != i:</span><br><span class="line">            alist[i], alist[min_index] = alist[min_index], alist[i]</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">226</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">selection_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为 O(n^2)。是稳定的排序方法。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/insertionSort.gif" alt></p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>将一个数据插入到<strong>已经排好序的有序数据</strong>中</p><ul><li>将要排序的是一个乱的数组 int[] arrays = {3, 2, 1, 3, 3}</li><li>在未知道数组元素的情况下，我们<strong>只能把数组的第一个元素作为已经排好序的有序数据</strong>，也就是说，把<code>{3}</code>看成是已经排好序的有序数据</li></ul><p>第一趟排序：</p><p>用数组的第二个数与第一个数(<strong>看成是已有序的数据</strong>)比较</p><ul><li>如果比第一个数大，那就不管他</li><li>如果比第一个数小，将第一个数往后退一步，将第二个数插入第一个数去</li></ul><p>第二趟排序：</p><p>用数组的第三个数与已是有序的数据 {2,3} (刚才在第一趟排的)比较</p><ul><li>如果比 2 大，那就不管它</li><li>如果比 2 小，那就将 2 退一个位置，让第三个数和1比较</li></ul><p>在第二步中：</p><ul><li>如果第三个数比 1 大，那么将第三个数插入到 2 的位置上</li><li>如果第三个数比 1 小，那么将 1 后退一步，将第三个数插入到 1 的位置上</li></ul><p>…</p><p>后面依此类推</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="comment"># 从第二个位置，即下标为1的元素开始向前插入</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(alist)):</span><br><span class="line">        <span class="comment"># 从第i个元素开始向前比较，如果小于前一个元素，交换位置</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> alist[j] &lt; alist[j<span class="number">-1</span>]:</span><br><span class="line">                alist[j], alist[j<span class="number">-1</span>] = alist[j<span class="number">-1</span>], alist[j]</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">insert_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>从一个数组中随机选出一个数N，通过一趟排序将数组分割成三个部分，1、小于N的区域 2、等于N的区域 3、大于N的区域，然后再按照此方法对小于区的和大于区分别递归进行，从而达到整个数据变成有序数组。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quickSort.gif" alt></p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>如下图：</p><p>假设最开始的基准数据为数组的第一个元素23，则首先用一个临时变量去存储基准数据，即 tmp=23，然后分别从数组的两端扫描数组，设两个指示标志：low 指向起始位置，high 指向末尾。</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort1.png" style="zoom:67%"><p>首先从后半部分开始，如果<strong>扫描到的值大于基准数据</strong>就让 high - 1，如果发现有元素比该基准数据的值小，比如上面的 18 &lt;= tmp ，就让<strong>high位置的值赋值给low位置</strong>，结果如下：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort2.png" style="zoom:67%"><p>然后开始从前往后扫描，如果扫描到的值小于基准数据就让 low+1，如果发现有元素大于基准数据的值，比如上图 46 &gt;= tmp，就再将 low 位置的值赋值给 high 位置的值，指针移动并且数据交换后的结果如下：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort3.png" style="zoom:67%"><p>然后再开始从前往后遍历，直到 low=high 结束循环，此时 low 或者 high 的下标就是<strong>基准数据23在该数组中的正确索引位置</strong>，如下图所示：</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/quicksort5.png" style="zoom:67%"><p>这样一遍遍的走下来，可以很清楚的知道，快排的本质就是把比基准数据小的都放到基准数的左边，比基准数大的数都放到基准数的右边，这样就找到了该数据在数组中的正确位置。</p><p>然后采用递归的方式分别对前半部分和后半部分排序，最终结果就是自然有序的了。</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist, start, end)</span>:</span></span><br><span class="line">    <span class="string">"""快速排序"""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归的退出条件</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设定起始元素为要寻找位置的基准元素</span></span><br><span class="line">    mid = alist[start]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># low为序列左边的由左向右移动的游标</span></span><br><span class="line">    low = start</span><br><span class="line"></span><br><span class="line">    <span class="comment"># high为序列右边的由右向左移动的游标</span></span><br><span class="line">    high = end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="comment"># 如果low与high未重合，high指向的元素不比基准元素小，则high向左移动</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[high] &gt;= mid:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将high指向的元素放到low的位置上</span></span><br><span class="line">        alist[low] = alist[high]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果low与high未重合，low指向的元素比基准元素小，则low向右移动</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> alist[low] &lt; mid:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将low指向的元素放到high的位置上</span></span><br><span class="line">        alist[high] = alist[low]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 退出循环后，low与high重合，此时所指位置为基准元素的正确位置</span></span><br><span class="line">    <span class="comment"># 将基准元素放到该位置</span></span><br><span class="line">    alist[low] = mid</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对基准元素左边的子序列进行快速排序</span></span><br><span class="line">    quick_sort(alist, start, low<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对基准元素右边的子序列进行快速排序</span></span><br><span class="line">    quick_sort(alist, low+<span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">quick_sort(alist,<span class="number">0</span>,len(alist)<span class="number">-1</span>)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/shell-sort.gif" alt></p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    n = len(alist)</span><br><span class="line">    <span class="comment"># 初始步长</span></span><br><span class="line">    gap = n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 按步长进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, n):</span><br><span class="line">            j = i</span><br><span class="line">            <span class="comment"># 插入排序</span></span><br><span class="line">            <span class="keyword">while</span> j&gt;=gap <span class="keyword">and</span> alist[j-gap] &gt; alist[j]:</span><br><span class="line">                alist[j-gap], alist[j] = alist[j], alist[j-gap]</span><br><span class="line">                j -= gap</span><br><span class="line">        <span class="comment"># 得到新的步长</span></span><br><span class="line">        gap = gap / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">shell_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p><p>将数组分解最小之后，然后合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/guibingSort.gif" alt></p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    <span class="comment"># 二分分解</span></span><br><span class="line">    num = len(alist)/<span class="number">2</span></span><br><span class="line">    left = merge_sort(alist[:num])</span><br><span class="line">    right = merge_sort(alist[num:])</span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    <span class="string">'''合并操作，将两个有序数组left[]和right[]合并成一个大的有序数组'''</span></span><br><span class="line">    <span class="comment">#left与right的下标指针</span></span><br><span class="line">    l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> l&lt;len(left) <span class="keyword">and</span> r&lt;len(right):</span><br><span class="line">        <span class="keyword">if</span> left[l] &lt; right[r]:</span><br><span class="line">            result.append(left[l])</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[r])</span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">    result += left[l:]</span><br><span class="line">    result += right[r:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">alist = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">sorted_alist = mergeSort(alist)</span><br><span class="line">print(sorted_alist)</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索是在一个项目集合中找到一个特定项目的算法过程。搜索通常的答案是真的或假的，因为该项目是否存在。 搜索的几种常见方法：顺序查找、二分法查找、二叉树查找、哈希查找</p><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-24%20%E4%B8%8B%E5%8D%881.46.34.png" style="zoom:67%"><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">      first = <span class="number">0</span></span><br><span class="line">      last = len(alist)<span class="number">-1</span></span><br><span class="line">      <span class="keyword">while</span> first&lt;=last:</span><br><span class="line">          midpoint = (first + last)/<span class="number">2</span></span><br><span class="line">          <span class="keyword">if</span> alist[midpoint] == item:</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">          <span class="keyword">elif</span> item &lt; alist[midpoint]:</span><br><span class="line">              last = midpoint<span class="number">-1</span></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              first = midpoint+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</span><br><span class="line">print(binary_search(testlist, <span class="number">3</span>))</span><br><span class="line">print(binary_search(testlist, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(alist, item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(alist) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        midpoint = len(alist)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> alist[midpoint]==item:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">if</span> item&lt;alist[midpoint]:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[:midpoint],item)</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary_search(alist[midpoint+<span class="number">1</span>:],item)</span><br><span class="line"></span><br><span class="line">testlist = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">32</span>, <span class="number">42</span>,]</span><br><span class="line">print(binary_search(testlist, <span class="number">3</span>))</span><br><span class="line">print(binary_search(testlist, <span class="number">13</span>))</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法排序</tag>
      </tags>
  </entry>
</search>
