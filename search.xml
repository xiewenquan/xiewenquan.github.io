<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python内置类型性能分析</title>
    <url>/225286723.html</url>
    <content><![CDATA[<h3 id="timeit模块"><a href="#timeit模块" class="headerlink" title="timeit模块"></a>timeit模块</h3><p>timeit模块可以用来测试一小段Python代码的执行速度。</p><p><strong>class timeit.Timer(stmt=’pass’, setup=’pass’, timer=<timer function>)</timer></strong></p><p>Timer是测量小段代码执行速度的类。</p><a id="more"></a><!-- build time:Sun Nov 24 2019 12:01:17 GMT+0800 (中国标准时间) --><p>stmt参数是要测试的代码语句（statment）；</p><p>setup参数是运行代码时需要的设置；</p><p>timer参数是一个定时器函数，与平台有关。</p><p><strong>timeit.Timer.timeit(number=1000000)</strong></p><p>Timer类中测试语句执行速度的对象方法。number参数是测试代码时的测试次数，默认为1000000次。方法返回执行代码的耗时，一个float类型的秒数。</p><h3 id="List的操作测试"><a href="#List的操作测试" class="headerlink" title="List的操作测试"></a>List的操作测试</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t1</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l = l + [i]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">   l = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">      l.append(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t3</span><span class="params">()</span>:</span></span><br><span class="line">   l = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t4</span><span class="params">()</span>:</span></span><br><span class="line">   l = list(range(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line"></span><br><span class="line">timer1 = Timer(<span class="string">"t1()"</span>, <span class="string">"from __main__ import t1"</span>)</span><br><span class="line">print(<span class="string">"concat "</span>,timer1.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer2 = Timer(<span class="string">"t2()"</span>, <span class="string">"from __main__ import t2"</span>)</span><br><span class="line">print(<span class="string">"append "</span>,timer2.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer3 = Timer(<span class="string">"t3()"</span>, <span class="string">"from __main__ import t3"</span>)</span><br><span class="line">print(<span class="string">"comprehension "</span>,timer3.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line">timer4 = Timer(<span class="string">"t4()"</span>, <span class="string">"from __main__ import t4"</span>)</span><br><span class="line">print(<span class="string">"list range "</span>,timer4.timeit(number=<span class="number">1000</span>), <span class="string">"seconds"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('concat ', 1.7890608310699463, 'seconds')</span></span><br><span class="line"><span class="comment"># ('append ', 0.13796091079711914, 'seconds')</span></span><br><span class="line"><span class="comment"># ('comprehension ', 0.05671119689941406, 'seconds')</span></span><br><span class="line"><span class="comment"># ('list range ', 0.014147043228149414, 'seconds')</span></span><br></pre></td></tr></table></figure><p><strong><em>insert与append比较</em></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t2</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">t5</span><span class="params">()</span>:</span></span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        li.insert(<span class="number">0</span>, i)</span><br><span class="line"></span><br><span class="line">timer2 = Timer(<span class="string">'t2()'</span>, <span class="string">'from __main__ import t2'</span>)</span><br><span class="line">print(<span class="string">"append:"</span>, timer2.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">timer5 = Timer(<span class="string">'t5()'</span>, <span class="string">'from __main__ import t5'</span>)</span><br><span class="line">print(<span class="string">"insert:"</span>, timer5.timeit(number=<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># append: 0.9202240769991477</span></span><br><span class="line"><span class="comment"># insert: 21.039387496999552</span></span><br><span class="line"></span><br><span class="line">从结果可以看出，append从尾端添加元素效率远远高于insert从顶端添加元素</span><br></pre></td></tr></table></figure><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python%E5%86%85%E7%BD%AE%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-11-17%20%E4%B8%8B%E5%8D%889.57.43.png" alt></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/1258387680.html</url>
    <content><![CDATA[<h2 id="各类排序算法"><a href="#各类排序算法" class="headerlink" title="各类排序算法"></a>各类排序算法</h2><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/sort.jpg" alt></p><p><strong>排序算法一般分类：</strong></p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/sort1.jpg" alt></p><p>相关概念：</p><p>​ <strong>稳定：</strong> 如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p><p>​ <strong>不稳定：</strong> 如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p><p>​ <strong>时间复杂度：</strong> 对排序数据的总的操作次数。反映当 n 变化时，操作次数呈现什么规律。</p><a id="more"></a><!-- build time:Sun Nov 24 2019 12:01:17 GMT+0800 (中国标准时间) --><p>​ <strong>空间复杂度：</strong> 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模 n 的函数。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>​ 依次比较两个相邻的数，将小数放到前面，大数放到后面</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>依次比较两个相邻的数，将小数放到前面，大数放到后面</p><p>第一趟：首先比较第 1 个数和第 2 个数，将小数放前，大数放后。然后比较第 2 个数和第 3 个数，将小数放前，大数放后，如此一直继续下去，直到比较最后两个数，将小数放前，大数放后。然后重复第一趟步骤，直到所有排序完成。</p><p>第一趟比较完成后，最后一个数一定是数组中最大的一个数，所以第二趟比较的时候最后一个数不参与比较。</p><p>第二趟完成后，倒数第二个数也一定是数组中第二大的数，所以第三趟比较的时候最后两个数不参与比较。</p><p>依此类推……</p><p><img src="https://passion-1300703951.cos.ap-beijing.myqcloud.com/Python-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/bubblesort.gif" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(alist)<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># j表示每次遍历需要比较的次数，是逐渐减小的</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(j):</span><br><span class="line">            <span class="keyword">if</span> alist[i] &gt; alist[i+<span class="number">1</span>]:</span><br><span class="line">                alist[i], alist[i+<span class="number">1</span>] = alist[i+<span class="number">1</span>], alist[i]</span><br><span class="line"></span><br><span class="line">li = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">bubble_sort(li)</span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法排序</tag>
      </tags>
  </entry>
</search>
